#include <iostream>
#include <thread>
#include <chrono>
#include <fcntl.h>
#include <termios.h>
#include <unistd.h>
#include <string>
#include <atomic>
#include <csignal>

using namespace std;

int serial_port;
atomic<bool> running(true);

// Initialize serial port
bool setupSerial(const string& port_name = "/dev/ttyUSB0", int baud_rate = B9600) {
    serial_port = open(port_name.c_str(), O_RDWR);
    if (serial_port < 0) {
        perror("❌ Cannot open serial port");
        return false;
    }

    termios tty;
    tcgetattr(serial_port, &tty);
    tty.c_cflag = baud_rate | CS8 | CLOCAL | CREAD;
    tty.c_iflag = IGNPAR;
    tty.c_oflag = 0;
    tty.c_lflag = 0;
    tty.c_cc[VTIME] = 0;
    tty.c_cc[VMIN] = 1;
    tcflush(serial_port, TCIFLUSH);
    tcsetattr(serial_port, TCSANOW, &tty);

    return true;
}

// Send command to Arduino
void sendCommand(char cmd) {
    write(serial_port, &cmd, 1);
}

// Read distance information from Arduino
void readArduino() {
    char buf[256];
    while (running) {
        int n = read(serial_port, buf, sizeof(buf) - 1);
        if (n > 0) {
            buf[n] = '\0';
            cout << buf;
            cout.flush();
        }
    }
}

// Set terminal to non-blocking, no-echo mode
void enableKeyboardInput(termios& oldt) {
    termios newt;
    tcgetattr(STDIN_FILENO, &oldt);
    newt = oldt;
    newt.c_lflag &= ~(ICANON | ECHO);  // Disable canonical input and echo
    tcsetattr(STDIN_FILENO, TCSANOW, &newt);
}

// Restore terminal mode
void restoreKeyboardInput(const termios& oldt) {
    tcsetattr(STDIN_FILENO, TCSANOW, &oldt);
}

// Handle Ctrl+C signal
void handleSignal(int signal) {
    running = false;
    close(serial_port);
    cout << "\n🚪 Program has exited.\n";
    exit(0);
}

int main() {
    signal(SIGINT, handleSignal); // Capture Ctrl+C

    if (!setupSerial()) return 1;

    sendCommand('p'); // Initial auto mode
    cout << "🚗 Auto obstacle avoidance mode started (press m to switch to manual)\n";

    // Start a thread to read Arduino data
    thread reader(readArduino);

    termios oldt;
    enableKeyboardInput(oldt);

    while (running) {
        if (read(STDIN_FILENO, &char key, 1) == 1) {
            switch (key) {
                case 'w': sendCommand('w'); cout << "↑ Moving forward\n"; break;
                case 's': sendCommand('s'); cout << "↓ Moving backward\n"; break;
                case 'a': sendCommand('a'); cout << "← Turning left\n"; break;
                case 'd': sendCommand('d'); cout << "→ Turning right\n"; break;
                case 'q': sendCommand('q'); cout << "⛔ Stopping\n"; break;
                case 'p': sendCommand('p'); cout << "🚗 Auto mode started\n"; break;
                case 'm': sendCommand('o'); cout << "🎮 Manual mode started\n"; break;
                case 27:  // ESC
                    running = false;
                    cout << "🛑 ESC to exit program\n";
                    break;
            }
        }
    }

    reader.join();
    restoreKeyboardInput(oldt);
    close(serial_port);
    return 0;
}
